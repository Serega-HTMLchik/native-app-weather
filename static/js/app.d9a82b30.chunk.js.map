{"version":3,"sources":["Redux/features/screen/screenSlice.js","Screen/CityScreen.js","Redux/store.js","App.js"],"names":["getDataMoscow","createAsyncThunk","_","rejectWithValue","dispatch","lat","lon","res","axios","get","headers","params","withCredentials","setData","data","getDataVoronezh","getDataRostov","screenSlice","createSlice","name","initialState","City","nowDate","nightShort","day_short","morning","night","day","evening","currentCity","time","reducers","setCurrentCity","state","action","payload","currentTime","Date","getHours","console","log","String","geo_object","locality","forecasts","date","parts","night_short","extraReducers","fulfilled","actions","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","opacity","justifyContent","accessibilityElementsHidden","color","columnCell","textAlign","display","scrol","height","title","fontSize","subtitle","button","borderColor","paddingTop","paddingBottom","loginText","CityScreen","props","styleBg","useDispatch","useSelector","screen","dayData","eveningData","nightData","morningData","btnPres","cityProps","useFocusEffect","useCallback","useEffect","View","style","Text","StatusBar","animated","barStyle","DataTable","Header","Title","numeric","Row","Cell","feels_like","temp_avg","wind_speed","store","configureStore","reducer","Tab","createMaterialBottomTabNavigator","App","NavigationContainer","Navigator","screenOptions","headerShown","unmountOnBlur","Screen","children"],"mappings":"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","file":"static/js/app.d9a82b30.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const getDataMoscow = createAsyncThunk('screen/getDataMoscow',\n    async (_, { rejectWithValue, dispatch, lat = '55.75396', lon = '37.620393' }) => {\n        const res = await axios.get('https://api.weather.yandex.ru/v2/forecast?extra=true&hours=false', {\n            headers: { 'X-Yandex-API-Key': 'c862fadf-0f19-4cd7-abd7-6f13a06bd115' },\n            params: {\n                lat: lat,\n                lon: lon,\n            },\n            withCredentials: true\n        })\n        dispatch(setData(res.data))\n    })\nexport const getDataVoronezh = createAsyncThunk('screen/getDataVoronezh',\n    async (_, { rejectWithValue, dispatch, lat = '51.672', lon = '39.1843' }) => {\n        const res = await axios.get('https://api.weather.yandex.ru/v2/forecast?extra=true&hours=false', {\n            headers: { 'X-Yandex-API-Key': 'c862fadf-0f19-4cd7-abd7-6f13a06bd115' },\n            params: {\n                lat: lat,\n                lon: lon,\n            },\n            withCredentials: true\n        })\n\n        dispatch(setData(res.data))\n    })\nexport const getDataRostov = createAsyncThunk('screen/getDataRostov',\n    async (_, { rejectWithValue, dispatch, lat = '47.2313', lon = '39.7233' }) => {\n        const res = await axios.get('https://api.weather.yandex.ru/v2/forecast?extra=true&hours=false', {\n            headers: { 'X-Yandex-API-Key': 'c862fadf-0f19-4cd7-abd7-6f13a06bd115' },\n            params: {\n                lat: lat,\n                lon: lon,\n            },\n            withCredentials: true\n        })\n        // console.log('state= ' + state);\n        dispatch(setData(res.data))\n    })\n\nconst initialState = {\n    City: 'Test',\n    nowDate: '',\n    nightShort: '',\n    day_short: '',\n    morning: '',\n    night: '',\n    day: '',\n    evening: '',\n    currentCity: '1',\n    lat: '55.75396',\n    lon: '37.620393',\n    time: '23'\n}\n\nexport const screenSlice = createSlice({\n    name: 'screen',\n    initialState,\n    reducers: {\n        setCurrentCity: (state, action) => {\n            state.currentCity = action.payload\n        },\n        setData: (state, action) => {\n            let currentTime = new Date().getHours()\n            console.log(currentTime)\n            state.time = String(currentTime)\n            state.City = action.payload.geo_object.locality.name\n            state.nowDate = action.payload.forecasts[0].date\n            state.nightShort = action.payload.forecasts[0].parts.night_short\n            state.day_short = action.payload.forecasts[0].parts.day_short\n            state.morning = action.payload.forecasts[0].parts.morning\n            state.night = action.payload.forecasts[0].parts.night\n            state.day = action.payload.forecasts[0].parts.day\n            state.evening = action.payload.forecasts[0].parts.evening\n        },\n    },\n    extraReducers: {\n        [getDataMoscow.fulfilled]: () => console.log('fulfilled_getDataMoscow'),\n        [getDataVoronezh.fulfilled]: () => console.log('fulfilled_getDataVoronezh'),\n        [getDataRostov.fulfilled]: () => console.log('fulfilled_getDataRostov'),\n    }\n})\n\nexport const { setCurrentCity } = screenSlice.actions\nexport const { setData } = screenSlice.actions\n\nexport default screenSlice.reducer","import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Button, TouchableOpacity } from 'react-native';\nimport { useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { getDataMoscow, getDataVoronezh, getDataRostov } from '../Redux/features/screen/screenSlice';\nimport { DataTable } from 'react-native-paper';\nimport { useFocusEffect } from '@react-navigation/native';\n\nfunction CityScreen(props) {\n    const dispatch = useDispatch()\n    const City = useSelector((state) => state.screen.City)\n    const nowDate = useSelector((state) => state.screen.nowDate)\n    const dayData = useSelector((state) => state.screen.day)\n    const eveningData = useSelector((state) => state.screen.evening)\n    const nightData = useSelector((state) => state.screen.night)\n    const morningData = useSelector((state) => state.screen.morning)\n    const time = useSelector((state) => state.screen.time)\n    function btnPres() {\n        if (props.cityProps == 'msc') {\n            dispatch(getDataMoscow())\n        }\n        else if (props.cityProps == 'vrn') {\n            dispatch(getDataVoronezh())\n        }\n        else if (props.cityProps == 'rnd') {\n            dispatch(getDataRostov())\n        }\n\n    }\n    let styleBg\n    if (time >= 17 || time <= 7) {\n        styleBg = StyleSheet.create({\n            container: {\n                flex: 1,\n                backgroundColor: '#000',\n                alignItems: 'center',\n                opacity: 0.9,\n                justifyContent: 'center',\n                accessibilityElementsHidden: true,\n                color: '#fff',\n            },\n        })\n    } else {\n        styleBg = StyleSheet.create({\n            container: {\n                flex: 1,\n                backgroundColor: '#000',\n                alignItems: 'center',\n                opacity: 0.2,\n                justifyContent: 'center',\n                accessibilityElementsHidden: true,\n                color: '#fff',\n            },\n        })\n    }\n    useFocusEffect(useCallback(() => {\n        btnPres()\n    }, []));\n    useEffect(() => {\n        btnPres()\n\n    }, [])\n    return (\n        <>\n            <View style={styleBg.container}>\n                <Text style={styles.title}>{City}</Text>\n                <Text style={styles.subtitle}>{nowDate}</Text>\n                {/* <TouchableOpacity style={styles.btn}>\n                    <Text style={{ color: '#fff', textAlign: 'center' }} onPress={btnPres}>Обновить</Text>\n                </TouchableOpacity> */}\n\n                <StatusBar\n                    animated={true}\n                    backgroundColor=\"#fff\"\n                    barStyle=\"#ffffff\" />\n            </View>\n            <DataTable>\n                <DataTable.Header>\n                    <DataTable.Title style={styles.title}>Время</DataTable.Title>\n                    <DataTable.Title style={styles.title}>Ощущается как</DataTable.Title>\n                    <DataTable.Title style={styles.title} numeric>Средняя температура</DataTable.Title>\n                    <DataTable.Title style={styles.title} numeric>Скорость ветра</DataTable.Title>\n                </DataTable.Header>\n\n                <DataTable.Row>\n                    <DataTable.Cell>День</DataTable.Cell>\n                    <DataTable.Cell style={styles.columnCell}>{dayData.feels_like}</DataTable.Cell>\n                    <DataTable.Cell style={styles.columnCell}>{dayData.temp_avg}</DataTable.Cell>\n                    <DataTable.Cell style={styles.columnCell}>{dayData.wind_speed}</DataTable.Cell>\n                </DataTable.Row>\n\n                <DataTable.Row>\n                    <DataTable.Cell>Вечер</DataTable.Cell>\n                    <DataTable.Cell style={styles.columnCell}>{eveningData.feels_like}</DataTable.Cell>\n                    <DataTable.Cell style={styles.columnCell}>{eveningData.temp_avg}</DataTable.Cell>\n                    <DataTable.Cell style={styles.columnCell}>{eveningData.wind_speed}</DataTable.Cell>\n                </DataTable.Row>\n                <DataTable.Row>\n                    <DataTable.Cell>Ночь</DataTable.Cell>\n                    <DataTable.Cell style={styles.columnCell}>{nightData.feels_like}</DataTable.Cell>\n                    <DataTable.Cell style={styles.columnCell}>{nightData.temp_avg}</DataTable.Cell>\n                    <DataTable.Cell style={styles.columnCell}>{nightData.wind_speed}</DataTable.Cell>\n                </DataTable.Row>\n                <DataTable.Row>\n                    <DataTable.Cell>Утро</DataTable.Cell>\n                    <DataTable.Cell style={styles.columnCell}>{morningData.feels_like}</DataTable.Cell>\n                    <DataTable.Cell style={styles.columnCell}>{morningData.temp_avg}</DataTable.Cell>\n                    <DataTable.Cell style={styles.columnCell}>{morningData.wind_speed}</DataTable.Cell>\n                </DataTable.Row>\n            </DataTable>\n        </>\n    );\n}\n\n\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#000',\n        alignItems: 'center',\n        opacity: 0.3,\n        justifyContent: 'center',\n        accessibilityElementsHidden: true,\n        color: '#fff',\n    },\n    columnCell: {\n        textAlign: 'center',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    scrol: {\n        backgroundColor: '#000',\n        height: '20%'\n    },\n    title: {\n        color: '#fff',\n        fontSize: '40px',\n    },\n    subtitle: {\n        color: '#fff',\n        fontSize: '18px',\n    },\n    button: {\n        borderColor: '#ff0000',\n        paddingTop: 10,\n        paddingBottom: 10,\n        backgroundColor: '#1E6738',\n    },\n    loginText: {\n        backgroundColor: '#000',\n    }\n\n});\n\nexport default CityScreen;","import { configureStore } from \"@reduxjs/toolkit\";\nimport screenSlice from \"./features/screen/screenSlice\";\n\nexport const store = configureStore({\n    reducer: {\n        screen: screenSlice\n    },\n})\n\n","import { NavigationContainer } from '@react-navigation/native'\nimport CityScreen from './Screen/CityScreen';\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport { store } from './Redux/store';\nimport { Provider } from 'react-redux';\n\n\nconst Tab = createMaterialBottomTabNavigator();\n\nexport default function App() {\n\n  return (\n    <Provider store={store}>\n      {/* <MoscowScreen /> */}\n      <NavigationContainer>\n        <Tab.Navigator screenOptions={{ headerShown: false, unmountOnBlur: true }}>\n          <Tab.Screen name=\"Москва\" children={() => <CityScreen cityProps=\"msc\" />} />\n          <Tab.Screen name=\"Воронеж\" children={() => <CityScreen cityProps=\"vrn\" />} />\n          <Tab.Screen name=\"Ростов-на-Дону\" children={() => <CityScreen cityProps=\"rnd\" />} />\n        </Tab.Navigator>\n      </NavigationContainer>\n    </Provider>\n\n  );\n}\n\n\n\n\n\n\n"],"sourceRoot":""}